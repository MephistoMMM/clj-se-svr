openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: ""
  termsOfService: ""
  version: 1.0.11
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      parameters:
        - $ref: '#/components/parameters/X-REQ-ID'
        - $ref: '#/components/parameters/X-REQER'
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                allOf:  
                  - $ref: '#/components/schemas/BaseResponse'
                  - type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/Pet'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
components:
  parameters:
    X-REQ-ID:
      name: X-REQ-ID
      in: header
      description: 请求id，格式为UUID
      required: true
      explode: false
      schema:
        type: string
        format: uuid
    X-REQER:
      name: X-REQER
      in: header
      description: 请求来源，格式可为“系统名+用户id”，如“exhibition-enterprise-9552712345623”
      required: true
      explode: false
      schema:
        type: string
  schemas:
    BaseResponse:
      type: object
      required:
        - message
        - code
      properties:
        message:
          type: string
        code:
          type: string
    BaseRequest:
      type: object
      properties: 
        data: 
          type: object
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
